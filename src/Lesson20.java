public class Lesson20 {
//    Конструкторы это методы, которые вызываются при каждом создании нового объекта, в любом случае!
//    При создании объекта конструкторы нужны чтобы инициализировать его поля
//    нужен чтобы пользователь не смог создать объект, не передав нужные значения, например имя и возраст для человека
//    без передачи этих параметров, эти имя и возраст будут назначены по умолчанию
//    если мы не создаем свой конструктор, то есть пустой конструктор по умолчанию, но мы его не видим.
//    Он обладает пустыми параметрами и у него пустое тело
//    конструктор отличается от обычного метода тем, что у него нет типа возвращаемого значения (например void)
//    и второе - имя конструктора всегда должно совпадать с именем класса
//    и в отличие от методов начинается с большой буквы
//    давайте переопределим конструктор по умолчанию своим конструктором
//    если мы переопределяем конструктор, то конструктор по умолчанию перестаёт работать и начинает работать ваш конструктор
//    конструкторы как и любые методы в Java можно перегружать
//    это означает, что можно иметь в одном классе несколько методов с одним и тем же именем до тех пор, пока у них разные параметры
//    и так Java понимает какой метод вызвать, если вы вызываете его. Она понимает это исходя из тех параметров,
//    которые вы передаёте в момент вызова метода.

    public static void main(String[] args) {

        Human20 human1 = new Human20();
        Human20 h1 = new Human20("Bob", 14);
        Human20 h2 = new Human20("Alex", 17);


        //    теперь можно обратиться к этой переменной просто по имени класса
        Human20.description = "Nice";
        Human20.getDescription();


//        мы можем обратиться к статическим переменным из объекта, но с точки зрения ООП это не имеет смысла
//        h1.description = "Bad";
//        имеет смысл изменить через сам класс:

        h1.getAllFields();
        h2.getAllFields();
        Human20.description = "Bad";
        h1.getAllFields();
        h2.getAllFields();
// и при запуске мы видим как меняется общая статическая переменная для всех объектов этого класса


        h1.printNumberOfPeople();
        h2.printNumberOfPeople();

        Human20 h3 = new Human20("Michael", 45);

        h1.printNumberOfPeople();
        h2.printNumberOfPeople();
        h3.printNumberOfPeople();


    }

}

class Human20 {
    private String name;
    private int age;

//создадим статическую переменную. она создаётся лишь один раз и делится между всеми объектами этого класса
    public static String description;

    private static int countPeople; // создадим статическую переменную для подсчёта числа, созданных работников
    // важно понять что эта переменная одна переменная класса для всех объектов


//давайте перенесём конструкторы ниже декларации полей
    public Human20(){
        System.out.println("Привет из первого конструктора");
//        добавим если пользователь не введёт никаких значений, то подставляется имя по умолчанию
        this.name = "имя по умолчанию";
        this.age = 0;


    }

//    добавим еще конструктор, который будет принимать на вход имя и возраст
    public Human20(String name) {
        this.name = name;
        System.out.println("Привет из второго конструктора");
    }

//    перегрузка методов - в одном классе можно иметь несколько методов с одинаковым названием до тех пока у них разные параметры,
//    то есть если мы передаем параметр строковый в скобках при создании объекта, то Java понимает это и вызывает нужный метод,
//    который имеет строковый параметр
//    если же мы не вызываем никакие параметры, оставляем пустые скобки здесь: Human20 human1 = new Human20()
//    то вызовется конструктор с пустыми скобками


//    создадим конструктор, который будет назначать сразу имя и возраст
    public Human20(String name, int age) {
        this.name = name;
        this.age = age;
        System.out.println("Привет из третьего конструктора");
        countPeople++; // инкрементируем эту переменную класса после инициализации каждой переменной объекта
    }

//    допустим мы хотим ограничить нашего пользователя чтобы он не смог создать объект класса Human не поставив в него значения имени и возраста,
//    тогда мы можем просто стереть другие конструкторы без имени и возраста
//    и теперь при создании нового объекта вылезает ошибка, если мы оставляем пустые скобки не поставив в него оба значения


    public void setName(String name){
        this.name = name;
    }
    public void setAge(int age){
        this.age = age;
    }

    public static void getDescription(){
        System.out.println(description);
    }

    public void getAllFields(){
        System.out.println(name+","+age+","+description);
    }

public void printNumberOfPeople(){
    System.out.println("Number of people is: "+countPeople);
}


}
