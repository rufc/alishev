public class Lesson23 {
    //    поглубже изучим строки
//    тип String
//    посмотрим на форматирование строк
//    на класс String Builder
//    в Java существует два типа объектов: mutable (изменяемый) и imutable (неизменяемый)
//    String - тип данных imutable неизменяемый
    public static void main(String[] args) {
        String x = "hello"; // эта строка не изменится до конца программы, так как строки imutable
        x.toUpperCase();
        System.out.println(x);
//    в выводе не получили строку в верхнем регистре потому что все методы класса String не изменяют строку,
//    а возвращают новую строку,
//    переопределим x и получим результат:
        x = x.toUpperCase();
        System.out.println(x);
//    теперь переменную x мы сослали на новый объект класса String
//    и поскольку на первую переменную никто не ссылается она удалится из оперативной памяти сборщиком мусора
//    если мы имеем дело с imutable объектами, то нам обязательно нужно помещать результат исполнения этих методов в переменную

        String string1 = "Hello";
        String string2 = " my";
        String string3 = " friend";
        String stringAll = string1 + string2 + string3;
        System.out.println(stringAll);

//    в таком случае добавляется еще 2 переменные, если таких операций конкатенации будет много или цикл например,
//    то будет большой расход памяти и это сильно замедлит программу
//    поэтому для таких целей был придуман класс StringBuilder

        StringBuilder sb = new StringBuilder("Hello"); // поставим в конструктор слово Hello, но можно и оставить пустым
        System.out.println(sb.toString());
        sb.append(" my");
        sb.append(" friend");
        System.out.println(sb.toString());

//    мы можем по цепочке вызывать методы
//        sb.append("...").append("...").append("...");
//    потому что метод append возвращает этот объект sb на котором он вызывается

//    мы не создали лишних объектов класса String, скорость при этом не страдает
//    если нужно много конкатенировать, то есть прибавлять к строке то используйте StringBuilder

//    запомните, если у вас совершается множество конкатенаций, если вы в цикле изменяете много строку, то
//    помните, что строка обычная String она не меняется, строка каждый раз создаётся новая и уже изменённая,
//    а если в


//    ФОРМАТИРОВАНИЕ СТРОК
//не переносить на следующую строку - print
//метод для форматирования - printf
        System.out.printf("This is a string, %s", "NICE"); //%s это место куда вставится переменная типа String (NICE)
        System.out.println();
        System.out.printf("This is a int, %d", 12); //%d это место куда вставится переменная типа int (12)
        System.out.println();
        System.out.printf("%f This is %s an all, %d", 10.5, "NICE", 12); //%f это место куда вставится переменная типа float
        System.out.println();
        System.out.printf("String %10d \n", 532); // %10d, где 10 это ширина или количество символов в длину
        System.out.printf("String %10d \n", 5);
        System.out.printf("String %10d \n", 10000); // \n - перенос строки
        System.out.printf("String %-10d \n", 10000); // %-10d выравнивание по левому краю и пустое место оказывается справа
        System.out.printf("String %.2f \n", 45.3256); // 2 числа после запятой и округление в большую сторону



    }
}